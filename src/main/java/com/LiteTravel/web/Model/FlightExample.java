package com.LiteTravel.web.Model;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

public class FlightExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table travel_flight
     *
     * @mbg.generated Sun Dec 13 09:17:44 CST 2020
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table travel_flight
     *
     * @mbg.generated Sun Dec 13 09:17:44 CST 2020
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table travel_flight
     *
     * @mbg.generated Sun Dec 13 09:17:44 CST 2020
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table travel_flight
     *
     * @mbg.generated Sun Dec 13 09:17:44 CST 2020
     */
    public FlightExample() {
        oredCriteria = new ArrayList<>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table travel_flight
     *
     * @mbg.generated Sun Dec 13 09:17:44 CST 2020
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table travel_flight
     *
     * @mbg.generated Sun Dec 13 09:17:44 CST 2020
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table travel_flight
     *
     * @mbg.generated Sun Dec 13 09:17:44 CST 2020
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table travel_flight
     *
     * @mbg.generated Sun Dec 13 09:17:44 CST 2020
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table travel_flight
     *
     * @mbg.generated Sun Dec 13 09:17:44 CST 2020
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table travel_flight
     *
     * @mbg.generated Sun Dec 13 09:17:44 CST 2020
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table travel_flight
     *
     * @mbg.generated Sun Dec 13 09:17:44 CST 2020
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table travel_flight
     *
     * @mbg.generated Sun Dec 13 09:17:44 CST 2020
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table travel_flight
     *
     * @mbg.generated Sun Dec 13 09:17:44 CST 2020
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table travel_flight
     *
     * @mbg.generated Sun Dec 13 09:17:44 CST 2020
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table travel_flight
     *
     * @mbg.generated Sun Dec 13 09:17:44 CST 2020
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andFlightIdIsNull() {
            addCriterion("flight_id is null");
            return (Criteria) this;
        }

        public Criteria andFlightIdIsNotNull() {
            addCriterion("flight_id is not null");
            return (Criteria) this;
        }

        public Criteria andFlightIdEqualTo(Integer value) {
            addCriterion("flight_id =", value, "flightId");
            return (Criteria) this;
        }

        public Criteria andFlightIdNotEqualTo(Integer value) {
            addCriterion("flight_id <>", value, "flightId");
            return (Criteria) this;
        }

        public Criteria andFlightIdGreaterThan(Integer value) {
            addCriterion("flight_id >", value, "flightId");
            return (Criteria) this;
        }

        public Criteria andFlightIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("flight_id >=", value, "flightId");
            return (Criteria) this;
        }

        public Criteria andFlightIdLessThan(Integer value) {
            addCriterion("flight_id <", value, "flightId");
            return (Criteria) this;
        }

        public Criteria andFlightIdLessThanOrEqualTo(Integer value) {
            addCriterion("flight_id <=", value, "flightId");
            return (Criteria) this;
        }

        public Criteria andFlightIdIn(List<Integer> values) {
            addCriterion("flight_id in", values, "flightId");
            return (Criteria) this;
        }

        public Criteria andFlightIdNotIn(List<Integer> values) {
            addCriterion("flight_id not in", values, "flightId");
            return (Criteria) this;
        }

        public Criteria andFlightIdBetween(Integer value1, Integer value2) {
            addCriterion("flight_id between", value1, value2, "flightId");
            return (Criteria) this;
        }

        public Criteria andFlightIdNotBetween(Integer value1, Integer value2) {
            addCriterion("flight_id not between", value1, value2, "flightId");
            return (Criteria) this;
        }

        public Criteria andFlightBeginIsNull() {
            addCriterion("flight_begin is null");
            return (Criteria) this;
        }

        public Criteria andFlightBeginIsNotNull() {
            addCriterion("flight_begin is not null");
            return (Criteria) this;
        }

        public Criteria andFlightBeginEqualTo(Integer value) {
            addCriterion("flight_begin =", value, "flightBegin");
            return (Criteria) this;
        }

        public Criteria andFlightBeginNotEqualTo(Integer value) {
            addCriterion("flight_begin <>", value, "flightBegin");
            return (Criteria) this;
        }

        public Criteria andFlightBeginGreaterThan(Integer value) {
            addCriterion("flight_begin >", value, "flightBegin");
            return (Criteria) this;
        }

        public Criteria andFlightBeginGreaterThanOrEqualTo(Integer value) {
            addCriterion("flight_begin >=", value, "flightBegin");
            return (Criteria) this;
        }

        public Criteria andFlightBeginLessThan(Integer value) {
            addCriterion("flight_begin <", value, "flightBegin");
            return (Criteria) this;
        }

        public Criteria andFlightBeginLessThanOrEqualTo(Integer value) {
            addCriterion("flight_begin <=", value, "flightBegin");
            return (Criteria) this;
        }

        public Criteria andFlightBeginIn(List<Integer> values) {
            addCriterion("flight_begin in", values, "flightBegin");
            return (Criteria) this;
        }

        public Criteria andFlightBeginNotIn(List<Integer> values) {
            addCriterion("flight_begin not in", values, "flightBegin");
            return (Criteria) this;
        }

        public Criteria andFlightBeginBetween(Integer value1, Integer value2) {
            addCriterion("flight_begin between", value1, value2, "flightBegin");
            return (Criteria) this;
        }

        public Criteria andFlightBeginNotBetween(Integer value1, Integer value2) {
            addCriterion("flight_begin not between", value1, value2, "flightBegin");
            return (Criteria) this;
        }

        public Criteria andFlightStopIsNull() {
            addCriterion("flight_stop is null");
            return (Criteria) this;
        }

        public Criteria andFlightStopIsNotNull() {
            addCriterion("flight_stop is not null");
            return (Criteria) this;
        }

        public Criteria andFlightStopEqualTo(Integer value) {
            addCriterion("flight_stop =", value, "flightStop");
            return (Criteria) this;
        }

        public Criteria andFlightStopNotEqualTo(Integer value) {
            addCriterion("flight_stop <>", value, "flightStop");
            return (Criteria) this;
        }

        public Criteria andFlightStopGreaterThan(Integer value) {
            addCriterion("flight_stop >", value, "flightStop");
            return (Criteria) this;
        }

        public Criteria andFlightStopGreaterThanOrEqualTo(Integer value) {
            addCriterion("flight_stop >=", value, "flightStop");
            return (Criteria) this;
        }

        public Criteria andFlightStopLessThan(Integer value) {
            addCriterion("flight_stop <", value, "flightStop");
            return (Criteria) this;
        }

        public Criteria andFlightStopLessThanOrEqualTo(Integer value) {
            addCriterion("flight_stop <=", value, "flightStop");
            return (Criteria) this;
        }

        public Criteria andFlightStopIn(List<Integer> values) {
            addCriterion("flight_stop in", values, "flightStop");
            return (Criteria) this;
        }

        public Criteria andFlightStopNotIn(List<Integer> values) {
            addCriterion("flight_stop not in", values, "flightStop");
            return (Criteria) this;
        }

        public Criteria andFlightStopBetween(Integer value1, Integer value2) {
            addCriterion("flight_stop between", value1, value2, "flightStop");
            return (Criteria) this;
        }

        public Criteria andFlightStopNotBetween(Integer value1, Integer value2) {
            addCriterion("flight_stop not between", value1, value2, "flightStop");
            return (Criteria) this;
        }

        public Criteria andFlightPriceIsNull() {
            addCriterion("flight_price is null");
            return (Criteria) this;
        }

        public Criteria andFlightPriceIsNotNull() {
            addCriterion("flight_price is not null");
            return (Criteria) this;
        }

        public Criteria andFlightPriceEqualTo(BigDecimal value) {
            addCriterion("flight_price =", value, "flightPrice");
            return (Criteria) this;
        }

        public Criteria andFlightPriceNotEqualTo(BigDecimal value) {
            addCriterion("flight_price <>", value, "flightPrice");
            return (Criteria) this;
        }

        public Criteria andFlightPriceGreaterThan(BigDecimal value) {
            addCriterion("flight_price >", value, "flightPrice");
            return (Criteria) this;
        }

        public Criteria andFlightPriceGreaterThanOrEqualTo(BigDecimal value) {
            addCriterion("flight_price >=", value, "flightPrice");
            return (Criteria) this;
        }

        public Criteria andFlightPriceLessThan(BigDecimal value) {
            addCriterion("flight_price <", value, "flightPrice");
            return (Criteria) this;
        }

        public Criteria andFlightPriceLessThanOrEqualTo(BigDecimal value) {
            addCriterion("flight_price <=", value, "flightPrice");
            return (Criteria) this;
        }

        public Criteria andFlightPriceIn(List<BigDecimal> values) {
            addCriterion("flight_price in", values, "flightPrice");
            return (Criteria) this;
        }

        public Criteria andFlightPriceNotIn(List<BigDecimal> values) {
            addCriterion("flight_price not in", values, "flightPrice");
            return (Criteria) this;
        }

        public Criteria andFlightPriceBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("flight_price between", value1, value2, "flightPrice");
            return (Criteria) this;
        }

        public Criteria andFlightPriceNotBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("flight_price not between", value1, value2, "flightPrice");
            return (Criteria) this;
        }

        public Criteria andFlightTicketRemainIsNull() {
            addCriterion("flight_ticket_remain is null");
            return (Criteria) this;
        }

        public Criteria andFlightTicketRemainIsNotNull() {
            addCriterion("flight_ticket_remain is not null");
            return (Criteria) this;
        }

        public Criteria andFlightTicketRemainEqualTo(Integer value) {
            addCriterion("flight_ticket_remain =", value, "flightTicketRemain");
            return (Criteria) this;
        }

        public Criteria andFlightTicketRemainNotEqualTo(Integer value) {
            addCriterion("flight_ticket_remain <>", value, "flightTicketRemain");
            return (Criteria) this;
        }

        public Criteria andFlightTicketRemainGreaterThan(Integer value) {
            addCriterion("flight_ticket_remain >", value, "flightTicketRemain");
            return (Criteria) this;
        }

        public Criteria andFlightTicketRemainGreaterThanOrEqualTo(Integer value) {
            addCriterion("flight_ticket_remain >=", value, "flightTicketRemain");
            return (Criteria) this;
        }

        public Criteria andFlightTicketRemainLessThan(Integer value) {
            addCriterion("flight_ticket_remain <", value, "flightTicketRemain");
            return (Criteria) this;
        }

        public Criteria andFlightTicketRemainLessThanOrEqualTo(Integer value) {
            addCriterion("flight_ticket_remain <=", value, "flightTicketRemain");
            return (Criteria) this;
        }

        public Criteria andFlightTicketRemainIn(List<Integer> values) {
            addCriterion("flight_ticket_remain in", values, "flightTicketRemain");
            return (Criteria) this;
        }

        public Criteria andFlightTicketRemainNotIn(List<Integer> values) {
            addCriterion("flight_ticket_remain not in", values, "flightTicketRemain");
            return (Criteria) this;
        }

        public Criteria andFlightTicketRemainBetween(Integer value1, Integer value2) {
            addCriterion("flight_ticket_remain between", value1, value2, "flightTicketRemain");
            return (Criteria) this;
        }

        public Criteria andFlightTicketRemainNotBetween(Integer value1, Integer value2) {
            addCriterion("flight_ticket_remain not between", value1, value2, "flightTicketRemain");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table travel_flight
     *
     * @mbg.generated do_not_delete_during_merge Sun Dec 13 09:17:44 CST 2020
     */
    public static class Criteria extends GeneratedCriteria {
        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table travel_flight
     *
     * @mbg.generated Sun Dec 13 09:17:44 CST 2020
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}